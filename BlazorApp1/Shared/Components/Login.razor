<AuthorizeView>
<NotAuthorized>

@page "/login"
@using BlazorApp1.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name"/>
        </div>
      <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" class="form-control" type="password" placeholder="Password"/>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn-primary">Login</button>
        </div>
    </div>
</div>

</NotAuthorized>
</AuthorizeView>

@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }
    private Model model = new();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if (userAccount==null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Forkert kode eller brugernavn");
            return;
        }

        var customAuthStateProvider = (CustomAuthStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationStateAsync(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });

        navManager.NavigateTo("/overview", true);
    }

}
