@page "/"
@using BlazorApp1.ZigbeeModels
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorApp1
@inject NavigationManager NavigationManager
@inject NewData data
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Test af Zigbee devices</PageTitle>
   

<table>
    @foreach (ZigbeeDevice zigbee in Data.zigbeeDevices)
    {
        if (zigbee is LedPanel)
        {
            LedPanel p = (LedPanel)zigbee;
    //        p.SomethingChanged -= UpdateBrightness;
    //        p.SomethingChanged += UpdateBrightness;


                <tr>
            <td>@p.Name</td> 
        <!--   <td><ToggleButton @bind-Status="p.State"/></td> --> 
            <td><input @bind="p.Brightness" @bind:event="oninput" type="range" min="0" max="254" id = "range" class="slider" step="1"/></td>
            <td>Lysstyrke @p.Brightness</td>
            <td><input @bind="p.ColorTemp" @bind:event="oninput" type="range" min="160" max="450" id = "range" class="slider" step="1"/></td> 
            <td>Farvetemperatur @p.ColorTemp</td>
                </tr>


        }
    }
</table>


<style>
.testButtons{border-radius: 6px;  background-color: #6CA350;  transition-duration: 0.3s; width:200px;}
.myButtons {border-radius: 12px;  background-color: #6CA350;  transition-duration: 0.3s; width:100px;}
.myButtons:active{  transform: translateY(2px); background-color: #99A040;}
.slider {width:6em;}
  .row{display: flex }
 </style>

 <br />
 <br />

<h4><label>@kitchenRoomSensor.Name </label><br /></h4> 
  <h6><label>Temperatur: @kitchenRoomSensor.temperature °C  Fugtighed: @kitchenRoomSensor.humidity% Batteri: @kitchenRoomSensor.voltage mV Opdateret: @kitchenRoomSensor.TimeStamp.ToLocalTime() </label><br><br></h6>
 
<h4><label>@workshopRoomSensor.Name </label><br /></h4>
  <h6><label>Temperatur: @workshopRoomSensor.temperature °C  Fugtighed: @workshopRoomSensor.humidity% Batteri: @workshopRoomSensor.voltage mV Opdateret: @workshopRoomSensor.TimeStamp.ToLocalTime()</label><br><br></h6>
 
<h4><label>@washingRoomSensor.Name </label><br /></h4>
  <h6><label>Temperatur: @washingRoomSensor.temperature °C  Fugtighed: @washingRoomSensor.humidity% Batteri: @washingRoomSensor.voltage mV Opdateret: @washingRoomSensor.TimeStamp.ToLocalTime()</label><br><br></h6>
 
<h4><label>@juliesRoomSensor.Name </label><br /></h4>
  <h6><label>Temperatur: @juliesRoomSensor.temperature °C  Fugtighed: @juliesRoomSensor.humidity% Batteri: @juliesRoomSensor.voltage mV Opdateret: @juliesRoomSensor.TimeStamp.ToLocalTime()</label><br><br></h6>
 
<h4><label>@bedRoomSensor.Name </label><br /></h4>
  <h6><label>Temperatur: @bedRoomSensor.temperature °C  Fugtighed: @bedRoomSensor.humidity% Batteri: @bedRoomSensor.voltage mV Opdateret: @bedRoomSensor.TimeStamp.ToLocalTime()</label><br><br></h6>

<h4><label>@livingRoomSensor.Name </label><br /></h4>
  <h6><label>Temperatur: @livingRoomSensor.temperature °C  Fugtighed: @livingRoomSensor.humidity% Batteri: @livingRoomSensor.voltage mV Opdateret: @livingRoomSensor.TimeStamp.ToLocalTime()</label><br><br></h6>
 
 <h4><label>@Data.sensorKontor.Name </label><br /></h4>
  <h6><label>Temperatur: @Data.sensorKontor.temperature °C  Fugtighed: @Data.sensorKontor.humidity% Batteri: @Data.sensorKontor.voltage mV Opdateret: @Data.sensorKontor.TimeStamp.ToLocalTime()</label><br><br></h6>
 
  <h4><label>@Data.sensorSystue.Name </label><br /></h4>
  <h6><label>Temperatur: @Data.sensorSystue.temperature °C  Fugtighed: @Data.sensorSystue.humidity% Batteri: @Data.sensorSystue.voltage mV Opdateret: @Data.sensorSystue.TimeStamp.ToLocalTime()</label><br><br></h6>
 
  <h4><label>@Data.sensorBad.Name </label><br /></h4>
  <h6><label>Temperatur: @Data.sensorBad.temperature °C  Fugtighed: @Data.sensorBad.humidity% Batteri: @Data.sensorBad.voltage mV Opdateret: @Data.sensorBad.TimeStamp.ToLocalTime()</label><br><br></h6>
 
  <h4><label>@Data.sensorBadKælder.Name </label><br /></h4>
  <h6><label>Temperatur: @Data.sensorBadKælder.temperature °C  Fugtighed: @Data.sensorBadKælder.humidity% Batteri: @Data.sensorBadKælder.voltage mV Opdateret: @Data.sensorBadKælder.TimeStamp.ToLocalTime()</label><br><br></h6>
 
  
  <br /><br />
 <h4>


  <label>@pirSensor.Name: @pirSensor.Name Status: @pirSensor.occupancy Batteri: @pirSensor.battery</label><br /><br />

</h4>
<label for="startGraf">Start </label>
<input @bind="Start" @bind:event="oninput" type="datetime-local" id="startGraf">
<label>Stop</label>
<input type="datetime-local" @bind="Stop" @bind:event="oninput" />

<div style="width:100%;" class="row">
<div draggable="true">
<img src="~/53004-parrot.jpg" />
<div class="my-4 col"><canvas id="GrafSoveVærelse" height="200"></canvas></div>
<div class="my-4 col"><canvas id="GrafVaskerum" height="200"></canvas></div>
</div>
</div>
<hr>


@code {
    bool test;
    private HubConnection hubConnection; 
    private TempAndHumiSensor bedRoomSensor = Data.sensorSoveVærelse;
    private TempAndHumiSensor livingRoomSensor = Data.sensorStue;
    private TempAndHumiSensor juliesRoomSensor = Data.sensorJuliesVærelse;
    private TempAndHumiSensor washingRoomSensor = Data.sensorVaskerum;
    private TempAndHumiSensor workshopRoomSensor = Data.sensorKælderVærksted;
    private TempAndHumiSensor kitchenRoomSensor = Data.sensorKøkken;



    private PIRSensorModel pirSensor = Data.sensorPirSoveværelse;
    public List<double> tempSove=new();
    public List<double> tempK=new();
    public List<double> fugtSove=new();
    public List<double> fugtK=new();
    public List<DateTime> tidSove=new();
    public List<DateTime> tidK=new();
    public TimeSpan span = new TimeSpan(2, 0, 0, 0);
    public DateTime Start { get { return _start; } set { _start = value; LoadFromDB(); }}
    public DateTime Stop  { get { return _stop; } set { _stop = value; LoadFromDB(); }}
    private DateTime _start;
    private DateTime _stop;

   // private int _Brightness = Data.slider;
    //public float BrightnessPercent = Data.slider * 100 / 254;
    //public int Brightness
    //{
    //    get{return _Brightness;}
    //    set{ _Brightness = value;
    //        ChangeBrightness();
    //        Data.slider = value;
    //        if (hubConnection is not null)
    //        {
    //            hubConnection.SendAsync("SendIntMessage", value);
    //        }
    //    }
    //}

    public void UpdateBrightness(object sender, EventArgs e)
    {
        if (hubConnection is not null)
            {
                hubConnection.SendAsync("SendSomethingMessage");
            }
    }

    public void LoadFromDB()
    {
        var dbSoveværelse = StartZigbeeCommunication.db.SelectData("tempandhumisensor", "Sensor Soveværelse", Start, Stop);
        var dbVaskerum = StartZigbeeCommunication.db.SelectData("tempandhumisensor", "Sensor Vaskerum", Start, Stop);

        tempSove.Clear();
        fugtSove.Clear();
        tidSove.Clear();
        foreach (TempAndHumiSensor item in dbSoveværelse)
        {
            tempSove.Add(item.temperature);
            fugtSove.Add(item.humidity);
            tidSove.Add(item.TimeStamp);
        }
        tempK.Clear();
        fugtK.Clear();
        tidK.Clear();
        foreach (TempAndHumiSensor item in dbVaskerum)
        {
            tempK.Add(item.temperature);
            fugtK.Add(item.humidity);
            tidK.Add(item.TimeStamp);
        }

        JSRuntime.InvokeVoidAsync("TransferData", tempSove, tempK, fugtSove, fugtK, tidSove, tidK);               
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Stop = DateTime.Now;
            Start = Stop.Subtract(span);
        }
      
            await JSRuntime.InvokeVoidAsync("Upd");               
        

    }

    public void AddToChart(TempAndHumiSensor zigbee)
    {
         JSRuntime.InvokeVoidAsync("AddDataPoint", zigbee.temperature,
                                                        zigbee.humidity, 
                                                        zigbee.TimeStamp,
                                                        zigbee.Name);         
    }

    protected override async Task OnInitializedAsync()
    {

        data.airSensorEvent -= NewAirSensorMessage; 
        data.airSensorEvent += NewAirSensorMessage; 
        data.pirSensorEvent -= NewPirSensorMessage; 
        data.pirSensorEvent += NewPirSensorMessage; 

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<TempAndHumiSensor>("RecieveAirSensor", (message) =>
        {
            switch (message.Name)
            {
                case "Sensor Stue": livingRoomSensor = message; break;
                case "Sensor Soveværelse": bedRoomSensor = message; break;
                case "Sensor Julies Værelse": juliesRoomSensor = message; break;
                case "Sensor Vaskerum": washingRoomSensor = message; break;
                case "Sensor Kælder Værksted": workshopRoomSensor = message; break;
                case "Sensor Køkken": kitchenRoomSensor = message; break;
                default: break;
            }
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<PIRSensorModel>("RecievePirSensor", (message) =>
        {
            pirSensor = message;
            InvokeAsync(StateHasChanged);
        });
   //    hubConnection.On<int>("RecieveInt", (message) =>
   //    {
   //        _Brightness = message;
   //        BrightnessPercent = message*100 / 254;
   //        InvokeAsync(StateHasChanged);
   //    });

        hubConnection.On("RecieveChange", () =>
        {
              InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public void NewAirSensorMessage(object sender, TempAndHumiSensor zigbee)
    {
        AddToChart(zigbee);
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendAirSensorMessage", zigbee);
        }
    }

    public void NewPirSensorMessage(object sender, PIRSensorModel zigbee)
    {
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendPirSensorMessage", zigbee);
        }
    }

    //public void TurnOn()
    //{
    //    data.ZigbeePublishMessage("zigbee2mqtt/0x94deb8fffe575196/set", "{\"state\": \"ON\"}"); 
    //    data.ZigbeePublishMessage("zigbee2mqtt/0x84ba20fffe34518e/set", "{\"state\": \"ON\"}"); 
        
    //}

    //public void TurnOff()
    //{
    //    data.ZigbeePublishMessage("zigbee2mqtt/0x94deb8fffe575196/set", "{\"state\": \"OFF\"}");   
    //    data.ZigbeePublishMessage("zigbee2mqtt/0x84ba20fffe34518e/set", "{\"state\": \"OFF\"}");       
        
    //}

    //public void ChangeBrightness()
    //{
    //    data.ZigbeePublishMessage("zigbee2mqtt/0x94deb8fffe575196/set", "{\"brightness\": \"" + Brightness.ToString() + "\"}");
    //    data.ZigbeePublishMessage("zigbee2mqtt/0x84ba20fffe34518e/set", "{\"brightness\": \"" + Brightness.ToString() + "\"}");

    //}

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    }