<AuthorizeView Roles ="Administrator">
<Authorized>

<h3>Overblik</h3>

@page "/overview"

@using BlazorApp1.ZigbeeModels
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorApp1
@using static global::ZigbeeModels.ZigbeeDevice
@inject NavigationManager NavigationManager
@inject NewData data

@inject IJSRuntime JSRuntime
@implements IAsyncDisposable





<PageTitle>Test af Zigbee devices</PageTitle>

        <table style="width:80%" class="table table-striped">
            <thead>
                <tr>
                    <th>Led Panel</th>
                    <th>Tænd / sluk</th>
                    <th>Lysstyrke</th>
                    <th>Farvetemperatur</th>
                    <th>Tidsstempel</th>
                </tr>
            </thead>
            <tbody>

                @foreach (ZigbeeDevice zigbee in Data.zigbeeDevices)
                {
                    if (zigbee is LedPanel)
                    {
                        LedPanel p = (LedPanel)zigbee;
                        <tr>
                            <td>@p.Name</td>
                            <td><ToggleButton @bind-Status="p.State" /></td>
                            <td><input @bind="p.Brightness" @bind:event="oninput" type="range" min="0" max="254" id="range" class="slider" step="1" /></td>
                            <td><input @bind="p.ColorTemp" @bind:event="oninput" type="range" min="160" max="450" id="range" class="slider" step="1" /></td>
                            <td>@p.TimeStamp</td>


                        </tr>
                    }

                }
            </tbody>
        </table>

        <style>
            .testButtons {
                border-radius: 6px;
                background-color: #6CA350;
                transition-duration: 0.3s;
                width: 200px;
            }

            .myButtons {
                border-radius: 12px;
                background-color: #6CA350;
                transition-duration: 0.3s;
                width: 100px;
            }

                .myButtons:active {
                    transform: translateY(2px);
                    background-color: #99A040;
                }

            .slider {
                width: 10em;
            }

            .row {
                display: flex
            }

            h4, h6 {
                display: inline;
            }
        </style>

        <br />
        <br />

        <table style="width:80%" class="table table-striped">

            <thead>
                <tr>
                    <th>Sensor</th>
                    <th>Temperatur</th>
                    <th>Fugt</th>
                    <th>Batteri</th>
                    <th>Signal</th>
                    <th>Tidsstempel</th>
                </tr>
            </thead>
            <tbody>

                @foreach (ZigbeeDevice device in Data.zigbeeDevices)
                {
                    if (device is TempAndHumiSensor)
                    {
                        TempAndHumiSensor temp = (TempAndHumiSensor)device;
                        <tr>
                            <td>@temp.Name.Substring(7)</td>
                            <td>@temp.temperature °C</td>
                            <td>@temp.humidity%</td>
                            <td>@temp.voltage mV</td>
                            <td>@temp.linkquality</td>
                            <td>@temp.TimeStamp.ToLocalTime()</td>
                        </tr>
                    }
                }

            </tbody>
        </table>

        <br /><br />
        <div style="width:80%;">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Valgt graf</th>
                        <th>Start dato og tid</th>
                        <th>Stop dato og tid</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <select @bind="SelectedChart" @bind:event="onchange">
                                @foreach (ZigbeeDevice s in Data.zigbeeDevices)
                                {
                                    if (s is TempAndHumiSensor)
                                    {
                                        <option>
                                            @s.Name
                                        </option>
                                    }
                                }
                            </select>
                        </td>
                        <td>
                            <input @bind="Start" @bind:event="oninput" type="datetime-local" id="startGraf">
                        </td>
                        <td>
                            <input type="datetime-local" @bind="Stop" @bind:event="oninput" />
                        </td>
                    </tr>
                </tbody>



            </table>



            <div class="my-4 col"><canvas id="Graf" height="100"></canvas></div>
        </div>
        <hr>

</Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }


    private double spids = 0.8995;
    private double lav = 0.3676;
    private double afgift = 0.90375;
    private double diverse = 0.356875;
    bool test;
    int brightness;

    private string _selectedChart = "";
    public string SelectedChart { get { return _selectedChart; } set { _selectedChart = value; LoadFromDB(value); } }

    private HubConnection hubConnection;
    private TempAndHumiSensor bedRoomSensor = Data.sensorSoveVærelse;
    private TempAndHumiSensor livingRoomSensor = Data.sensorStue;
    private TempAndHumiSensor juliesRoomSensor = Data.sensorJuliesVærelse;
    private TempAndHumiSensor washingRoomSensor = Data.sensorVaskerum;
    private TempAndHumiSensor workshopRoomSensor = Data.sensorKælderVærksted;
    private TempAndHumiSensor kitchenRoomSensor = Data.sensorKøkken;

    private PIRSensorModel pirSensor = Data.sensorPirSoveværelse;
    public List<double> tempList = new();
    public List<double> tempK = new();
    public List<double> fugtList = new();
    public List<double> fugtK = new();
    public List<DateTime> tidList = new();
    public List<DateTime> tidK = new();
    public TimeSpan span = new TimeSpan(2, 0, 0, 0);
    public DateTime Start { get { return _start; } set { _start = value; LoadFromDB(SelectedChart); } }
    public DateTime Stop { get { return _stop; } set { _stop = value; LoadFromDB(SelectedChart); } }
    private DateTime _start;
    private DateTime _stop;

    public void UpdateBrightness(object sender, EventArgs e)
    {
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendSomethingMessage");
        }
    }

    public async Task LoadFromDB(string chart)
    {
        var chartData = await StartZigbeeCommunication.db.SelectData("tempandhumisensor", chart, Start, Stop);

        tempList.Clear();
        fugtList.Clear();
        tidList.Clear();
        foreach (TempAndHumiSensor item in chartData)
        {
            tempList.Add(item.temperature);
            fugtList.Add(item.humidity);
            tidList.Add(item.TimeStamp);
        }

        await JSRuntime.InvokeVoidAsync("TransferData", chart, tempList, fugtList, tidList);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            _stop = DateTime.Now;
            Start = _stop.Subtract(span);
        }

        await JSRuntime.InvokeVoidAsync("Upd");


    }

    public void AddToChart(TempAndHumiSensor zigbee)
    {
        JSRuntime.InvokeVoidAsync("AddDataPoint", zigbee.temperature,
                                                       zigbee.humidity,
                                                       zigbee.TimeStamp,
                                                       zigbee.Name);
    }

    protected override async Task OnInitializedAsync()
    {

        data.airSensorEvent -= NewAirSensorMessage;
        data.airSensorEvent += NewAirSensorMessage;
        data.pirSensorEvent -= NewPirSensorMessage;
        data.pirSensorEvent += NewPirSensorMessage;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<TempAndHumiSensor>("RecieveAirSensor", (message) =>
        {
            switch (message.Name)
            {
                case "Sensor Stue": livingRoomSensor = message; break;
                case "Sensor Soveværelse": bedRoomSensor = message; break;
                case "Sensor Julies Værelse": juliesRoomSensor = message; break;
                case "Sensor Vaskerum": washingRoomSensor = message; break;
                case "Sensor Kælder Værksted": workshopRoomSensor = message; break;
                case "Sensor Køkken": kitchenRoomSensor = message; break;
                default: break;
            }
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<PIRSensorModel>("RecievePirSensor", (message) =>
        {
            pirSensor = message;
            InvokeAsync(StateHasChanged);
        });
        //    hubConnection.On<int>("RecieveInt", (message) =>
        //    {
        //        _Brightness = message;
        //        BrightnessPercent = message*100 / 254;
        //        InvokeAsync(StateHasChanged);
        //    });

        hubConnection.On("RecieveChange", () =>
        {
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public void NewAirSensorMessage(object sender, TempAndHumiSensor zigbee)
    {
        AddToChart(zigbee);
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendAirSensorMessage", zigbee);
        }
    }

    public void NewPirSensorMessage(object sender, PIRSensorModel zigbee)
    {
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendPirSensorMessage", zigbee);
        }
    }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    }





