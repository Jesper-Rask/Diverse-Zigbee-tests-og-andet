<AuthorizeView Roles ="Administrator, ReadOnly">
<Authorized>



<h3>Overblik</h3>

@page "/overview"

@using BlazorApp1.ZigbeeModels
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorApp1
@using static global::ZigbeeModels.ZigbeeDevice
@inject NavigationManager NavigationManager
@inject NewData data

@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@inject AuthenticationStateProvider AuthenticationStateProvider
@if (readOnly){
    <h7>readonly mode</h7>
}
<div class="@(readOnly ? "readonly" : "")">



<PageTitle>Test af Zigbee devices</PageTitle>

        <table style="width:80%" class="table table-striped">
            <thead>
                <tr>
                    <th>Lamper</th>
                    <th>Tænd / sluk</th>
                    <th>Lysstyrke</th>
                    <th>Farvetemperatur</th>
                    <th>Signal</th>
                    <th>Tidsstempel</th>
                </tr>
            </thead>
            <tbody>

                @foreach (ZigbeeDevice zigbee in Data.zigbeeDevices)
                {
                    if (zigbee is LedPanel)
                    {
                        LedPanel p = (LedPanel)zigbee;
                        <tr>
                            <td>@p.Name</td>
                            <td><ToggleButton @bind-Status="p.State" /></td>
                            <td><input @bind="p.Brightness" @bind:event="oninput" type="range" min="0" max="254" id="range" class="slider" step="1" /></td>
                            <td><input @bind="p.ColorTemp" @bind:event="oninput" type="range" min="160" max="450" id="range" class="slider" step="1" /></td>
                            <td>@p.linkquality </td>
                            <td>@p.TimeStamp</td>
                            </tr>
                        }
                        else if (zigbee is IkeaBulb)
                        {
                            IkeaBulb bulb = (IkeaBulb)zigbee;
                            <tr>
                                <td>@bulb.Name</td>
                                <td><ToggleButton @bind-Status="bulb.State" /></td>
                                <td><input @bind="bulb.Brightness" @bind:event="oninput" type="range" min="0" max="254" id="range" class="slider" step="1" /></td>
                                <td></td>
                                <td>@bulb.linkquality</td>

                                <td>@bulb.TimeStamp</td>
                            </tr>
                        }
                }
            </tbody>
        </table>

             <table style="width:80%" class="table table-striped">
            <thead>
                <tr>
                    <th>Radiatorventil</th>
                    <th>Setpunkt</th>
                    <th>Temperatur</th>
                    <th>Batteri</th>
                    <th>Signal</th>
                    <th>Tidsstempel</th>
                </tr>
            </thead>
            <tbody>

                @foreach (ZigbeeDevice zigbee in Data.zigbeeDevices)
                {
                    if (zigbee is RadiatorValve)
                    {
                        RadiatorValve r = (RadiatorValve)zigbee;
                        <tr>
                            <td>@r.Name</td>
                            <td><input @bind="r.RadiatorSP" @bind:event="oninput" type="range" min="5" max="30" id="range" class="slider" step="1" />@r.current_heating_setpoint °C </td>
                            <td>@r.local_temperature °C</td>
                            <td>@r.battery</td>
                            <td>@r.linkquality</td>
                            <td>@r.TimeStamp</td>


                        </tr>
                    }

                }
            </tbody>
        </table>

        <style>
                .readonly {
        background-color: lightgray;
        pointer-events: none;
    }
            .testButtons {
                border-radius: 6px;
                background-color: #6CA350;
                transition-duration: 0.3s;
                width: 200px;
            }

            .myButtons {
                border-radius: 12px;
                background-color: #6CA350;
                transition-duration: 0.3s;
                width: 100px;
            }

                .myButtons:active {
                    transform: translateY(2px);
                    background-color: #99A040;
                }

            .slider {
                width: 10em;
            }

            .row {
                display: flex
            }

            h4, h6 {
                display: inline;
            }
        </style>

        <br />
        <br />

        <table style="width:80%" class="table table-striped">

            <thead>
                <tr>
                    <th>Sensor</th>
                    <th>Temperatur</th>
                    <th>Fugt</th>
                    <th>Batteri</th>
                    <th>Signal</th>
                    <th>Tidsstempel</th>
                    <th>Fugt Høj</th>
                    <th>Fugt Lav</th>
                    <th>Temp Høj</th>
                    <th>Temp Lav</th>


                </tr>
            </thead>
            <tbody>

                @foreach (ZigbeeDevice device in Data.zigbeeDevices)
                {
                    if (device is TempAndHumiSensor)
                    {
                        TempAndHumiSensor temp = (TempAndHumiSensor)device;
                        <tr>
                            <td>@temp.Name.Substring(7)</td>
                            <td>@temp.temperature °C</td>
                            <td>@temp.humidity%</td>
                            <td>@temp.battery%</td>
                            <td>@temp.linkquality</td>
                            <td>@temp.TimeStamp.ToLocalTime()</td>
                            <td>
                                    <input style="width: 4rem;" type="number" min="30" max="95" value="@temp.HumidityHighLimit" @onchange="(e) => UpdateHumidityHighLimit(temp, e)" />
                            </td>
                            <td>
                                    <input style="width: 4rem;" type="number" min="29" max="94" value="@temp.HumidityLowLimit" @onchange="(e) => UpdateHumidityLowLimit(temp, e)" />
                            </td>
                                <td>
                                    <input style="width: 4rem;" type="number" min="-25" max="50" value="@temp.TemperatureHighLimit" @onchange="(e) => UpdateTemperatureHighLimit(temp, e)" />
                                </td>
                                <td>
                                    <input style="width: 4rem;" type="number" min="-26" max="49" value="@temp.TemperatureLowLimit" @onchange="(e) => UpdateTemperatureLowLimit(temp, e)" />
                                </td>
                        </tr>
                    }
                }

            </tbody>
        </table>

        </div>

        <br /><br />
        <div style="width:80%;">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Valgt graf</th>
                        <th>Start dato og tid</th>
                        <th>Stop dato og tid</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <select @bind="SelectedChart" @bind:event="onchange">
                                @foreach (ZigbeeDevice s in Data.zigbeeDevices)
                                {
                                    if (s is TempAndHumiSensor)
                                    {
                                        <option>
                                            @s.Name
                                        </option>
                                    }
                                }
                            </select>
                        </td>
                        <td>
                            <input @bind="Start" @bind:event="oninput" type="datetime-local" id="startGraf">
                        </td>
                        <td>
                            <input type="datetime-local" @bind="Stop" @bind:event="oninput" />
                        </td>
                    </tr>
                </tbody>



            </table>



            <div class="my-4 col"><canvas id="Graf" height="100"></canvas></div>
        </div>
        <hr>

</Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }


    private double spids = 0.8995;
    private double lav = 0.3676;
    private double afgift = 0.90375;
    private double diverse = 0.356875;
    bool test;
    int brightness;

    private string _selectedChart = "Sensor Kontor";
    public string SelectedChart { get { return _selectedChart; } set { _selectedChart = value; LoadFromDB(value); } }

    private HubConnection hubConnection;

    private PIRSensorModel pirSensor = Data.sensorPirSoveværelse;
    public List<double> tempList = new();
    public List<double> tempK = new();
    public List<double> fugtList = new();
    public List<double> fugtK = new();
    public List<DateTime> tidList = new();
    public List<DateTime> tidK = new();
    public TimeSpan span = new TimeSpan(2, 0, 0, 0);
    public DateTime Start { get { return _start; } set { _start = value; LoadFromDB(SelectedChart); } }
    public DateTime Stop { get { return _stop; } set { _stop = value; LoadFromDB(SelectedChart); } }
    private DateTime _start;
    private DateTime _stop;


    private void UpdateHumidityHighLimit(TempAndHumiSensor temp, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newLimit))
        {
            newLimit = NewData.Limit(newLimit, 30, 95);
            if (newLimit <= temp.HumidityLowLimit) temp.HumidityLowLimit = newLimit - 1;
            temp.HumidityHighLimit = newLimit;

        }
    }

    private void UpdateHumidityLowLimit(TempAndHumiSensor temp, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newLimit))
        {
            newLimit = NewData.Limit(newLimit, 29, 94);
            if (newLimit >= temp.HumidityHighLimit) temp.HumidityHighLimit = newLimit + 1;
            temp.HumidityLowLimit = newLimit;


        }
    }

    private void UpdateTemperatureHighLimit(TempAndHumiSensor temp, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newLimit))
        {
            newLimit = NewData.Limit(newLimit, -25, 50);
            if (newLimit <= temp.TemperatureLowLimit) temp.TemperatureLowLimit = newLimit - 1;
            temp.TemperatureHighLimit = newLimit;


        }
    }

    private void UpdateTemperatureLowLimit(TempAndHumiSensor temp, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newLimit))
        {
            newLimit = NewData.Limit(newLimit, -26, 49);
            if (newLimit >= temp.TemperatureHighLimit) temp.TemperatureHighLimit = newLimit + 1;
            temp.TemperatureLowLimit = newLimit;


        }
    }


    public void UpdateBrightness(object sender, EventArgs e)
    {
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendSomethingMessage");
        }
    }

    public async Task LoadFromDB(string chart)
    {
        var chartData = await StartZigbeeCommunication.db.SelectData("tempandhumisensor", chart, Start, Stop);

        tempList.Clear();
        fugtList.Clear();
        tidList.Clear();
        foreach (TempAndHumiSensor item in chartData)
        {
            tempList.Add(item.temperature);
            fugtList.Add(item.humidity);
            tidList.Add(item.TimeStamp);
        }

        await JSRuntime.InvokeVoidAsync("TransferData", chart, tempList, fugtList, tidList);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            _stop = DateTime.Now;
            Start = _stop.Subtract(span);
        }

        await JSRuntime.InvokeVoidAsync("Upd");


    }

    public void AddToChart(TempAndHumiSensor zigbee)
    {
        JSRuntime.InvokeVoidAsync("AddDataPoint", zigbee.temperature,
                                                       zigbee.humidity,
                                                       zigbee.TimeStamp,
                                                       zigbee.Name);
    }


    public bool readOnly;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        readOnly = authenticationState.User.IsInRole("ReadOnly");
        data.airSensorEvent -= NewAirSensorMessage;
        data.airSensorEvent += NewAirSensorMessage;
        data.pirSensorEvent -= NewPirSensorMessage;
        data.pirSensorEvent += NewPirSensorMessage;
        data.radiatorValveEvent -= NewRadiatorMessage;
        data.radiatorValveEvent += NewRadiatorMessage;
        data.ledPanelEvent -= NewLedPanelMessage;
        data.ledPanelEvent += NewLedPanelMessage;
        // data.ikeaBulbEvent -= NewIkeaBulbMessage;
        // data.ikeaBulbEvent += NewIkeaBulbMessage;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        // hubConnection.On<IkeaBulb>("ReceiveAirSensor", (message) =>
        // {
        //     InvokeAsync(StateHasChanged);
        // });
        hubConnection.On<TempAndHumiSensor>("ReceiveAirSensor", (message) =>
        {
             InvokeAsync(StateHasChanged);
        });


        hubConnection.On<PIRSensorModel>("ReceivePirSensor", (message) =>
        {
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<LedPanel>("ReceiveLedPanel", (message) =>
        {
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<RadiatorValve>("ReceiveRadiatorValve", (message) =>
       {          
           InvokeAsync(StateHasChanged);
       });

        await hubConnection.StartAsync();
    }


    public void NewAirSensorMessage(object sender, TempAndHumiSensor zigbee)
    {
        AddToChart(zigbee);
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendAirSensorMessage", zigbee);
        }
    }

    // public void NewIkeaBulbMessage(object sender, IkeaBulb zigbee)
    // {
    //     if (hubConnection is not null)
    //     {
    //         hubConnection.SendAsync("SendAirSensorMessage", zigbee);
    //     }
    // }

    public void NewPirSensorMessage(object sender, PIRSensorModel zigbee)
    {
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendPirSensorMessage", zigbee);
        }
    }

    public void NewRadiatorMessage(object sender, RadiatorValve zigbee)
    {
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendRadiatorValveMessage", zigbee);
        }
    }

    public void NewLedPanelMessage(object sender, LedPanel zigbee)
    {
        if (hubConnection is not null)
        {
            hubConnection.SendAsync("SendLedPanelMessage", zigbee);
        }
    }





    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    }





